from django.db import models
from django.core.validators import MinValueValidator, MaxValueValidator

class ReagentType(models.TextChoices):
    COLLECTOR = 'collector', '–°–æ–±–∏—Ä–∞—Ç–µ–ª—å'
    FROTHER = 'frother', '–ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å'
    ACTIVATOR = 'activator', '–ê–∫—Ç–∏–≤–∞—Ç–æ—Ä'
    EXPERIMENTAL = 'experimental', '–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π'

class Reagent(models.Model):
    """–ú–æ–¥–µ–ª—å —Ä–µ–∞–≥–µ–Ω—Ç–∞"""
    name = models.CharField('–ù–∞–∑–≤–∞–Ω–∏–µ', max_length=100, unique=True)
    type = models.CharField('–¢–∏–ø', max_length=20, choices=ReagentType.choices)
    description = models.TextField('–û–ø–∏—Å–∞–Ω–∏–µ', blank=True)
    
    # –î–æ–∑–∏—Ä–æ–≤–∫–∏
    dosage_min = models.FloatField('–ú–∏–Ω. –¥–æ–∑–∏—Ä–æ–≤–∫–∞ (–≥/—Ç)', validators=[MinValueValidator(0)])
    dosage_max = models.FloatField('–ú–∞–∫—Å. –¥–æ–∑–∏—Ä–æ–≤–∫–∞ (–≥/—Ç)', validators=[MinValueValidator(0)])
    dosage_cleaner_min = models.FloatField('–ú–∏–Ω. –¥–æ–∑–∏—Ä–æ–≤–∫–∞ –ø–µ—Ä–µ—á–∏—Å—Ç–∫–∏ (–≥/—Ç)', null=True, blank=True)
    dosage_cleaner_max = models.FloatField('–ú–∞–∫—Å. –¥–æ–∑–∏—Ä–æ–≤–∫–∞ –ø–µ—Ä–µ—á–∏—Å—Ç–∫–∏ (–≥/—Ç)', null=True, blank=True)
    
    # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    average_extraction = models.FloatField('–°—Ä–µ–¥–Ω–µ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ (%)', null=True, blank=True, 
                                         validators=[MinValueValidator(0), MaxValueValidator(100)])
    max_extraction = models.FloatField('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ (%)', null=True, blank=True,
                                     validators=[MinValueValidator(0), MaxValueValidator(100)])
    
    # –°–≤–æ–π—Å—Ç–≤–∞
    is_standard = models.BooleanField('–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π', default=True)
    is_high_efficiency = models.BooleanField('–í—ã—Å–æ–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', default=False)
    is_experimental = models.BooleanField('–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π', default=False)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    working_ph_min = models.FloatField('–ú–∏–Ω. —Ä–∞–±–æ—á–∏–π pH', null=True, blank=True)
    working_ph_max = models.FloatField('–ú–∞–∫—Å. —Ä–∞–±–æ—á–∏–π pH', null=True, blank=True)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    created_at = models.DateTimeField('–°–æ–∑–¥–∞–Ω', auto_now_add=True)
    updated_at = models.DateTimeField('–û–±–Ω–æ–≤–ª–µ–Ω', auto_now=True)
    
    class Meta:
        verbose_name = '–†–µ–∞–≥–µ–Ω—Ç'
        verbose_name_plural = '–†–µ–∞–≥–µ–Ω—Ç—ã'
        ordering = ['name']
    
    def __str__(self):
        return f"{self.name} ({self.get_type_display()})"
    
    @property
    def icon(self):
        """–ò–∫–æ–Ω–∫–∞ —Ä–µ–∞–≥–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞"""
        icons = {
            'collector': 'üîπ',
            'frother': 'ü´ß',
            'activator': '‚ö°',
            'experimental': 'üß¨'
        }
        return icons.get(self.type, 'üß™')
    
    @property
    def tags(self):
        """–¢–µ–≥–∏ —Ä–µ–∞–≥–µ–Ω—Ç–∞"""
        tags = []
        if self.is_standard:
            tags.append(('–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π', 'standard'))
        if self.is_high_efficiency:
            tags.append(('–í—ã—Å–æ–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', 'high-efficiency'))
        if self.is_experimental:
            tags.append(('–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π', 'experimental'))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
        if self.max_extraction and self.max_extraction > 95:
            tags.append(('–†–µ–∫–æ—Ä–¥—Å–º–µ–Ω', 'record'))
        if self.type == 'experimental':
            tags.append(('MP –°–µ—Ä–∏—è', 'mp-series'))
            
        return tags
    
    @property
    def dosage_range(self):
        """–î–∏–∞–ø–∞–∑–æ–Ω –¥–æ–∑–∏—Ä–æ–≤–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if self.dosage_cleaner_min and self.dosage_cleaner_max:
            return {
                'main': f"{self.dosage_min}-{self.dosage_max}",
                'cleaner': f"{self.dosage_cleaner_min}-{self.dosage_cleaner_max}"
            }
        return {
            'main': f"{self.dosage_min}-{self.dosage_max}",
            'cleaner': None
        }


class FlotationTest(models.Model):
    """–ú–æ–¥–µ–ª—å —Ñ–ª–æ—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    number = models.IntegerField('–ù–æ–º–µ—Ä —Ç–µ—Å—Ç–∞', unique=True)
    date_conducted = models.DateField('–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è', auto_now_add=True)
    
    # –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    initial_grade_analysis = models.FloatField('–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ –∞–Ω–∞–ª–∏–∑—É (–≥/—Ç)')
    calculated_initial_grade = models.FloatField('–†–∞—Å—á–µ—Ç–Ω–æ–µ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (–≥/—Ç)')
    
    # –†–µ–∞–≥–µ–Ω—Ç–Ω—ã–π —Ä–µ–∂–∏–º
    reagent_regime = models.TextField('–†–µ–∞–≥–µ–Ω—Ç–Ω—ã–π —Ä–µ–∂–∏–º')
    is_microflotation = models.BooleanField('–ú–∏–∫—Ä–æ—Ñ–ª–æ—Ç–∞—Ü–∏—è', default=False)
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–µ—Å—Ç–∞
    configuration = models.CharField('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', max_length=50, blank=True)
    
    @property
    def extraction(self):
        """–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ"""
        useful_products = self.products.exclude(product_type='tails')
        total_au = self.products.aggregate(total=models.Sum('au_content'))['total'] or 0
        useful_au = useful_products.aggregate(total=models.Sum('au_content'))['total'] or 0
        return (useful_au / total_au * 100) if total_au > 0 else 0
    
    @property 
    def concentrate_yield(self):
        """–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –≤—ã—Ö–æ–¥ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞"""
        concentrate = self.products.filter(product_type='final_concentrate').first()
        total_mass = self.products.aggregate(total=models.Sum('mass'))['total'] or 0
        return (concentrate.mass / total_mass * 100) if concentrate and total_mass > 0 else 0
    
    @property
    def efficiency(self):
        """–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
        extraction = self.extraction
        yield_val = self.concentrate_yield
        initial = self.initial_grade_analysis
        return ((extraction - yield_val) / (100 - initial) * 100) if initial != 100 else 0
    
    class Meta:
        verbose_name = '–§–ª–æ—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç'
        verbose_name_plural = '–§–ª–æ—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã'
        ordering = ['number']
    
    def __str__(self):
        return f"–¢–µ—Å—Ç ‚Ññ{self.number} - {self.extraction}% –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ"


class FlotationProduct(models.Model):
    """–ü—Ä–æ–¥—É–∫—Ç—ã —Ñ–ª–æ—Ç–∞—Ü–∏–∏"""
    test = models.ForeignKey(FlotationTest, on_delete=models.CASCADE, related_name='products')
    name = models.CharField('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞', max_length=100)
    mass = models.FloatField('–ú–∞—Å—Å–∞ (–≥)')
    grade = models.FloatField('–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (–≥/—Ç)')
    au_content = models.FloatField('–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ Au (–º–∫–≥)')
    
    product_type = models.CharField('–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞', max_length=20, choices=[
        ('final_concentrate', '–§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç'),
        ('tails', '–û—Ç–≤–∞–ª—å–Ω—ã–µ —Ö–≤–æ—Å—Ç—ã'),
        ('cleaner_tails', '–•–≤–æ—Å—Ç—ã –ø–µ—Ä–µ—á–∏—Å—Ç–∫–∏'),
        ('control_concentrate', '–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π')
    ])
    
    class Meta:
        verbose_name = '–ü—Ä–æ–¥—É–∫—Ç —Ñ–ª–æ—Ç–∞—Ü–∏–∏'
        verbose_name_plural = '–ü—Ä–æ–¥—É–∫—Ç—ã —Ñ–ª–æ—Ç–∞—Ü–∏–∏'
    
    def __str__(self):
        return f"{self.test.number} - {self.name}"
